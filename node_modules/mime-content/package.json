{
  "name": "mime-content",
  "description": "A simple mime-type based string parser",
  "author": {
    "name": "Alex Wolfe",
    "email": "alex@activeprospect.com"
  },
  "version": "0.0.2",
  "main": "mime-content.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/mit-license.php"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/activeprospect/node-mime-content.git"
  },
  "engines": {
    "node": ">=0.8.1"
  },
  "scripts": {
    "test": "cake test",
    "prepublish": "cake build"
  },
  "dependencies": {
    "cheerio": ">= 0.12.1",
    "xpath": ">= 0.0.5",
    "xmldom": ">= 0.1.16"
  },
  "devDependencies": {
    "coffee-script": ">= 1.4.0",
    "mocha": ">= 1.7.x",
    "chai": ">= 1.4.x"
  },
  "readme": "# mime-content\n\nA node.js module for parsing strings based on MIME Type.\n\n[![Build Status](https://travis-ci.org/activeprospect/node-mime-content.png?branch=master)](https://travis-ci.org/activeprospect/node-mime-content)\n\n## Usage\n\nThis module supports parsing content for a small handful of common MIME Types. Pull requests for adding additional types\nare welcome.\n\n\n### HTML\n\nAfter parsing a HTML string, CSS selectors can be used to query the parsed content. The [cheerio](https://github.com/MatthewMueller/cheerio) module\nis used to query the DOM. Selectors supported by JQuery can be used.\n\nUse the `toString()` function to retrieve the un-parsed content.\n\n```javascript\nvar content = require('mime-content');\n\nvar html = content('<html><body><h1 class=\"big\">Header!</h1></body></html>', 'text/html');\n\nhtml('h1.big').text();\n=> 'Header!'\n\nhtml.toString();\n=> '<html><body><h1 class=\"big\">Header!</h1></body></html>'\n```\n\n\n### JSON\n\nAfter parsing a JSON string, a regular object is returned. Use the `toString()` function on that object to retrieve\nthe un-parsed content.\n\n```javascript\nvar content = require('mime-content');\n\nvar json = content('{\"foo\":\"bar\"}', 'application/json');\n\njson.foo\n=> 'bar'\n\njson.toString()\n=> '{\"foo\":\"bar\"}'\n```\n\n\n### XML\n\nBoth the application/xml and text/xml MIME Types are supported.\n\nAfter parsing a XML string, the [xmldom](https://github.com/jindw/xmldom) document is available. Also, XPath support is\nprovided by the [xpath](https://github.com/goto100/xpath) module. All DOM 3 [XPath expressions](http://www.w3.org/TR/xpath/#section-Expressions)\nare supported.\n\n\nBy default, the XML parser assumes your XPath expression is looking for a single DOM node so it returns the first match\nin the document. If you'd like all matching nodes instead, use the second optional boolean parameter with your query. Pass\n`true` to return all matching nodes.\n\nUse the `toString()` function to retrieve the un-parsed content.\n\n```javascript\nvar content = require('mime-content');\n\nvar xml = content('<people><person id=\"123\"><name>Bob Smith</name></person><person id=\"456\"><name>Jimmy Dean</name></person></people>', 'text/xml');\n\nxml.xpath('/people/person/name/text()').data;\n=> 'Bob Smith'\n\nxml.xpath('/people/person/name/text()', true).map(function(text) {\n  return text.data;\n});\n=> ['Bob Smith', 'Jimmy Dean']\n\nxml.xpath('/people/person/@id', true).map(function(attr) {\n  return attr.value;\n});\n=> ['123', '456']\n\nxml.toString();\n=> '<people><person id=\"123\"><name>Bob Smith</name></person><person id=\"456\"><name>Jimmy Dean</name></person></people>'\n```\n\n\n### URL Encoding\n\nAfter parsing a `application/x-www-form-urlencoded` string, a regular object is returned. Use the `toString()` function\non that object to retrieve the un-parsed content.\n\n```javascript\nvar content = require('mime-content');\n\nvar qs = content('foo=bar&foo=baz&baz=bip', 'application/x-www-form-urlencoded');\n\nqs.foo\n=> ['bar', 'baz']\n\nqs.baz\n=> 'bip'\n\njson.toString()\n=> 'foo=bar&foo=baz&baz=bip'\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/activeprospect/node-mime-content/issues"
  },
  "_id": "mime-content@0.0.2",
  "dist": {
    "shasum": "e193f9b019084becda9102afb1c3ce0bdcdc4db2"
  },
  "_from": "mime-content@",
  "_resolved": "https://registry.npmjs.org/mime-content/-/mime-content-0.0.2.tgz"
}
